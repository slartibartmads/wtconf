#!/usr/bin/env python3

import yaml
import subprocess
import sys
import os
import argparse
from pathlib import Path
import shutil

from rich.console import Console
from rich.table import Table
from rich import box
from rich.text import Text

parser = argparse.ArgumentParser(description="wtconf is a tiny config file launcher")
parser.add_argument("--add", help="Add new config")  # e.g. wtconf --add /etc/foo.conf
args = parser.parse_args()

TABLE_WIDTH = 64



def print_config(): # draw the menu
    console = Console()

    while True:
        os.system("clear")

        # Banner
        console.print("\n[bold black on blue]wtconf[/bold black on blue] a tiny config launcher", 
        justify="center")

        # Table
        table = Table(show_lines=False, box=box.SIMPLE, width=64, collapse_padding=True, show_header=True, border_style="dim")
        table.add_column("#", justify="center", header_style="bold blue" ,style="blue")
        table.add_column("Config", justify="left")
        table.add_column("Path", justify="left", style="dim", header_style="dim")

        items = list(loaded.items()) if loaded else []

        for i, (label, path) in enumerate(items, start=1): # Populate table
            table.add_row(str(i), str(label), str(path))

        if not items:
            table.add_row("-", "[dim]<empty>[/dim]", "[dim]wtconf --add /path/to/file.conf[/dim]")

        console.print(table, justify="center")


        def pad_for_table(console, text, table_width=TABLE_WIDTH):
            cols = shutil.get_terminal_size().columns
            block_pad = max(0, (cols - table_width) // 2)               # left offset of the centered block
            display_width = Text.from_markup(text).cell_len             # visible width (ignores markup)
            inner_pad = max(0, (table_width - display_width) // 2)      # center inside the block
            return " " * (block_pad + inner_pad)
        
        prompt = "Enter [bold blue]ID[/bold blue], [bold blue]s[/bold blue]ettings, [bold blue]c[/bold blue]onfiglist or [bold blue]q[/bold blue]uit: "

        pad = pad_for_table(console, prompt)
        sel = console.input(pad + prompt).strip()

        if sel.lower() == "q":
            console.print("\n")
            sys.exit(0)

        if sel.lower() == "s":
            subprocess.run([editor, str(SETTINGS_FILE)]).returncode
            if rc == 0:
                load_configs()
            continue

        if sel.lower() == "c":
            subprocess.run([editor, str(CONFIGLIST_FILE)]).returncode
            if rc == 0:
                load_configs()
                continue

        if not sel.isdigit():
            console.print("\n")
            console.print("ID must be a number. Press Enter...", justify="center")
            input()
            continue

        idx = int(sel) - 1
        if not (0 <= idx < len(items)):
            console.print("\n")
            console.print("ID out of range. Press Enter...", justify="center")
            input()
            continue

        label, path = items[idx]
        rc = subprocess.run([editor, str(path)]).returncode
        if rc != 0:
            console.print("editor exited with code {rc}) Press Enter...", justify="center")

            input()



def load_configs():
    global loaded, editor, SETTINGS_FILE, CONFIGLIST_FILE

    # load configlist.yaml
    with open(CONFIGLIST_FILE) as f:
        loaded = yaml.safe_load(f) or {}

    # Load settings.yaml
    with open(SETTINGS_FILE) as f:
        config = yaml.safe_load(f) or {}

    editor = config.get("editor", "nano") # fallback to nano if editor missing    

def init():
    global SETTINGS_FILE, CONFIGLIST_FILE

    CONFIG_DIR = Path(os.environ.get("XDG_CONFIG_HOME", Path.home() / ".config")) / ""
    SETTINGS_FILE = CONFIG_DIR/"wtconf" / "settings.yaml"
    CONFIGLIST_FILE = CONFIG_DIR/"wtconf" /"configlist.yaml"

    SETTINGS_FILE.parent.mkdir(parents=True, exist_ok=True)

    if not CONFIGLIST_FILE.exists():
        CONFIGLIST_FILE.touch()
    if not SETTINGS_FILE.exists():
        SETTINGS_FILE.write_text("editor: nano")

    load_configs()

    if args.add is None: # Default behavior: if no --add argument is passed, show the menu
        print_config()

init()


# Handle adding new configs to CONFIGLIST_FILE
if args.add:
    path = Path(args.add).expanduser().resolve()
    label = os.path.splitext(os.path.basename(args.add))[0]

    # add to dict
    loaded[label] = str(path)

    # write to yaml
    with open(CONFIGLIST_FILE, "w") as f:
        yaml.safe_dump(loaded, f, sort_keys=False)

        print(f"Added {label}: {path}")